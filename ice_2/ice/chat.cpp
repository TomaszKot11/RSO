//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::chat::NoSuchRoom> iceC_chat_NoSuchRoom_init("::chat::NoSuchRoom");

const ::IceInternal::DefaultUserExceptionFactoryInit<::chat::NameAlreadyExists> iceC_chat_NameAlreadyExists_init("::chat::NameAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::chat::NoSuchUser> iceC_chat_NoSuchUser_init("::chat::NoSuchUser");

const ::IceInternal::DefaultUserExceptionFactoryInit<::chat::NickNotAvailable> iceC_chat_NickNotAvailable_init("::chat::NickNotAvailable");

const ::std::string iceC_chat_User_ids[2] =
{
    "::Ice::Object",
    "::chat::User"
};
const ::std::string iceC_chat_User_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendMessage",
    "sendPrivateMessage"
};
const ::std::string iceC_chat_User_sendMessage_name = "sendMessage";
const ::std::string iceC_chat_User_sendPrivateMessage_name = "sendPrivateMessage";

const ::std::string iceC_chat_ChatRoom_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatRoom"
};
const ::std::string iceC_chat_ChatRoom_ops[] =
{
    "Leave",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "listUsers",
    "postMessage"
};
const ::std::string iceC_chat_ChatRoom_listUsers_name = "listUsers";
const ::std::string iceC_chat_ChatRoom_join_name = "join";
const ::std::string iceC_chat_ChatRoom_postMessage_name = "postMessage";
const ::std::string iceC_chat_ChatRoom_getUser_name = "getUser";
const ::std::string iceC_chat_ChatRoom_Leave_name = "Leave";

const ::std::string iceC_chat_ChatRoomFactory_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatRoomFactory"
};
const ::std::string iceC_chat_ChatRoomFactory_ops[] =
{
    "getNumberOfRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newChatRoom"
};
const ::std::string iceC_chat_ChatRoomFactory_newChatRoom_name = "newChatRoom";
const ::std::string iceC_chat_ChatRoomFactory_getNumberOfRooms_name = "getNumberOfRooms";

const ::std::string iceC_chat_ChatServer_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatServer"
};
const ::std::string iceC_chat_ChatServer_ops[] =
{
    "getRoom",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newChatRoom",
    "registerFactory",
    "unregisterFactory"
};
const ::std::string iceC_chat_ChatServer_getRooms_name = "getRooms";
const ::std::string iceC_chat_ChatServer_getRoom_name = "getRoom";
const ::std::string iceC_chat_ChatServer_newChatRoom_name = "newChatRoom";
const ::std::string iceC_chat_ChatServer_registerFactory_name = "registerFactory";
const ::std::string iceC_chat_ChatServer_unregisterFactory_name = "unregisterFactory";

}

chat::NoSuchRoom::~NoSuchRoom()
{
}

const ::std::string&
chat::NoSuchRoom::ice_staticId()
{
    static const ::std::string typeId = "::chat::NoSuchRoom";
    return typeId;
}

chat::NameAlreadyExists::~NameAlreadyExists()
{
}

const ::std::string&
chat::NameAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::chat::NameAlreadyExists";
    return typeId;
}

chat::NoSuchUser::~NoSuchUser()
{
}

const ::std::string&
chat::NoSuchUser::ice_staticId()
{
    static const ::std::string typeId = "::chat::NoSuchUser";
    return typeId;
}

chat::NickNotAvailable::~NickNotAvailable()
{
}

const ::std::string&
chat::NickNotAvailable::ice_staticId()
{
    static const ::std::string typeId = "::chat::NickNotAvailable";
    return typeId;
}

bool
chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_User_ids, iceC_chat_User_ids + 2, s);
}

::std::vector<::std::string>
chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_chat_User_ids[0], &iceC_chat_User_ids[2]);
}

::std::string
chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::User::ice_staticId()
{
    static const ::std::string typeId = "::chat::User";
    return typeId;
}

/// \cond INTERNAL
bool
chat::User::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->readAll(iceP_message, iceP_fromWho);
    inS.endReadParams();
    this->sendMessage(::std::move(iceP_message), ::std::move(iceP_fromWho), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::User::_iceD_sendPrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->readAll(iceP_message, iceP_fromWho);
    inS.endReadParams();
    this->sendPrivateMessage(::std::move(iceP_message), ::std::move(iceP_fromWho), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_User_ops, iceC_chat_User_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_User_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendMessage(in, current);
        }
        case 5:
        {
            return _iceD_sendPrivateMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
chat::ChatRoom::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatRoom_ids, iceC_chat_ChatRoom_ids + 2, s);
}

::std::vector<::std::string>
chat::ChatRoom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_chat_ChatRoom_ids[0], &iceC_chat_ChatRoom_ids[2]);
}

::std::string
chat::ChatRoom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatRoom::ice_staticId()
{
    static const ::std::string typeId = "::chat::ChatRoom";
    return typeId;
}

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_listUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    UserList ret = this->listUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_nick;
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_nick, iceP_who);
    inS.endReadParams();
    this->join(::std::move(iceP_nick), ::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_postMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->readAll(iceP_message, iceP_fromWho);
    inS.endReadParams();
    this->postMessage(::std::move(iceP_message), ::std::move(iceP_fromWho), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<UserPrx> ret = this->getUser(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_Leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->Leave(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatRoom_ops, iceC_chat_ChatRoom_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatRoom_ops)
    {
        case 0:
        {
            return _iceD_Leave(in, current);
        }
        case 1:
        {
            return _iceD_getUser(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_listUsers(in, current);
        }
        case 8:
        {
            return _iceD_postMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
chat::ChatRoomFactory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatRoomFactory_ids, iceC_chat_ChatRoomFactory_ids + 2, s);
}

::std::vector<::std::string>
chat::ChatRoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_chat_ChatRoomFactory_ids[0], &iceC_chat_ChatRoomFactory_ids[2]);
}

::std::string
chat::ChatRoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatRoomFactory::ice_staticId()
{
    static const ::std::string typeId = "::chat::ChatRoomFactory";
    return typeId;
}

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceD_newChatRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<ChatRoomPrx> ret = this->newChatRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceD_getNumberOfRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getNumberOfRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatRoomFactory_ops, iceC_chat_ChatRoomFactory_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatRoomFactory_ops)
    {
        case 0:
        {
            return _iceD_getNumberOfRooms(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_newChatRoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
chat::ChatServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatServer_ids, iceC_chat_ChatServer_ids + 2, s);
}

::std::vector<::std::string>
chat::ChatServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_chat_ChatServer_ids[0], &iceC_chat_ChatServer_ids[2]);
}

::std::string
chat::ChatServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatServer::ice_staticId()
{
    static const ::std::string typeId = "::chat::ChatServer";
    return typeId;
}

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_getRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<ChatRoomPrx> ret = this->getRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_newChatRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<ChatRoomPrx> ret = this->newChatRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_registerFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ChatRoomFactoryPrx> iceP_crf;
    istr->readAll(iceP_crf);
    inS.endReadParams();
    this->registerFactory(::std::move(iceP_crf), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_unregisterFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<ChatRoomFactoryPrx> iceP_crf;
    istr->readAll(iceP_crf);
    inS.endReadParams();
    this->unregisterFactory(::std::move(iceP_crf), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatServer_ops, iceC_chat_ChatServer_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatServer_ops)
    {
        case 0:
        {
            return _iceD_getRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRooms(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_newChatRoom(in, current);
        }
        case 7:
        {
            return _iceD_registerFactory(in, current);
        }
        case 8:
        {
            return _iceD_unregisterFactory(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
chat::UserPrx::_iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_User_sendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_fromWho);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::UserPrx::_iceI_sendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_User_sendPrivateMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_fromWho);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
chat::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

/// \cond INTERNAL
void
chat::ChatRoomPrx::_iceI_listUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<UserList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_listUsers_name);
    outAsync->invoke(iceC_chat_ChatRoom_listUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatRoomPrx::_iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_nick, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_join_name);
    outAsync->invoke(iceC_chat_ChatRoom_join_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_nick, iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NickNotAvailable&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatRoomPrx::_iceI_postMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_ChatRoom_postMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_fromWho);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatRoomPrx::_iceI_getUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<UserPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_getUser_name);
    outAsync->invoke(iceC_chat_ChatRoom_getUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NoSuchUser&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatRoomPrx::_iceI_Leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_ChatRoom_Leave_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
chat::ChatRoomPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ChatRoomPrx>();
}
/// \endcond

const ::std::string&
chat::ChatRoomPrx::ice_staticId()
{
    return ChatRoom::ice_staticId();
}

/// \cond INTERNAL
void
chat::ChatRoomFactoryPrx::_iceI_newChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatRoomFactory_newChatRoom_name);
    outAsync->invoke(iceC_chat_ChatRoomFactory_newChatRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatRoomFactoryPrx::_iceI_getNumberOfRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatRoomFactory_getNumberOfRooms_name);
    outAsync->invoke(iceC_chat_ChatRoomFactory_getNumberOfRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
chat::ChatRoomFactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ChatRoomFactoryPrx>();
}
/// \endcond

const ::std::string&
chat::ChatRoomFactoryPrx::ice_staticId()
{
    return ChatRoomFactory::ice_staticId();
}

/// \cond INTERNAL
void
chat::ChatServerPrx::_iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RoomList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatServer_getRooms_name);
    outAsync->invoke(iceC_chat_ChatServer_getRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatServerPrx::_iceI_getRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatServer_getRoom_name);
    outAsync->invoke(iceC_chat_ChatServer_getRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NoSuchRoom&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatServerPrx::_iceI_newChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_chat_ChatServer_newChatRoom_name);
    outAsync->invoke(iceC_chat_ChatServer_newChatRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatServerPrx::_iceI_registerFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ChatRoomFactoryPrx>& iceP_crf, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_ChatServer_registerFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_crf);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
chat::ChatServerPrx::_iceI_unregisterFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<ChatRoomFactoryPrx>& iceP_crf, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_chat_ChatServer_unregisterFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_crf);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
chat::ChatServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ChatServerPrx>();
}
/// \endcond

const ::std::string&
chat::ChatServerPrx::ice_staticId()
{
    return ChatServer::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_chat_User_sendMessage_name = "sendMessage";

const ::std::string iceC_chat_User_sendPrivateMessage_name = "sendPrivateMessage";

const ::std::string iceC_chat_ChatRoom_listUsers_name = "listUsers";

const ::std::string iceC_chat_ChatRoom_join_name = "join";

const ::std::string iceC_chat_ChatRoom_postMessage_name = "postMessage";

const ::std::string iceC_chat_ChatRoom_getUser_name = "getUser";

const ::std::string iceC_chat_ChatRoom_Leave_name = "Leave";

const ::std::string iceC_chat_ChatRoomFactory_newChatRoom_name = "newChatRoom";

const ::std::string iceC_chat_ChatRoomFactory_getNumberOfRooms_name = "getNumberOfRooms";

const ::std::string iceC_chat_ChatServer_getRooms_name = "getRooms";

const ::std::string iceC_chat_ChatServer_getRoom_name = "getRoom";

const ::std::string iceC_chat_ChatServer_newChatRoom_name = "newChatRoom";

const ::std::string iceC_chat_ChatServer_registerFactory_name = "registerFactory";

const ::std::string iceC_chat_ChatServer_unregisterFactory_name = "unregisterFactory";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::chat::NoSuchRoom> iceC_chat_NoSuchRoom_init("::chat::NoSuchRoom");

}

chat::NoSuchRoom::~NoSuchRoom() throw()
{
}

::std::string
chat::NoSuchRoom::ice_id() const
{
    return "::chat::NoSuchRoom";
}

chat::NoSuchRoom*
chat::NoSuchRoom::ice_clone() const
{
    return new NoSuchRoom(*this);
}

void
chat::NoSuchRoom::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
chat::NoSuchRoom::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::chat::NoSuchRoom", -1, true);
    ::Ice::StreamWriter< NoSuchRoom, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::NoSuchRoom::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchRoom, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::chat::NameAlreadyExists> iceC_chat_NameAlreadyExists_init("::chat::NameAlreadyExists");

}

chat::NameAlreadyExists::~NameAlreadyExists() throw()
{
}

::std::string
chat::NameAlreadyExists::ice_id() const
{
    return "::chat::NameAlreadyExists";
}

chat::NameAlreadyExists*
chat::NameAlreadyExists::ice_clone() const
{
    return new NameAlreadyExists(*this);
}

void
chat::NameAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
chat::NameAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::chat::NameAlreadyExists", -1, true);
    ::Ice::StreamWriter< NameAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::NameAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NameAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::chat::NoSuchUser> iceC_chat_NoSuchUser_init("::chat::NoSuchUser");

}

chat::NoSuchUser::~NoSuchUser() throw()
{
}

::std::string
chat::NoSuchUser::ice_id() const
{
    return "::chat::NoSuchUser";
}

chat::NoSuchUser*
chat::NoSuchUser::ice_clone() const
{
    return new NoSuchUser(*this);
}

void
chat::NoSuchUser::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
chat::NoSuchUser::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::chat::NoSuchUser", -1, true);
    ::Ice::StreamWriter< NoSuchUser, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::NoSuchUser::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchUser, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::chat::NickNotAvailable> iceC_chat_NickNotAvailable_init("::chat::NickNotAvailable");

}

chat::NickNotAvailable::~NickNotAvailable() throw()
{
}

::std::string
chat::NickNotAvailable::ice_id() const
{
    return "::chat::NickNotAvailable";
}

chat::NickNotAvailable*
chat::NickNotAvailable::ice_clone() const
{
    return new NickNotAvailable(*this);
}

void
chat::NickNotAvailable::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
chat::NickNotAvailable::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::chat::NickNotAvailable", -1, true);
    ::Ice::StreamWriter< NickNotAvailable, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::NickNotAvailable::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NickNotAvailable, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::chat::upCast(User* p) { return p; }

void
::IceProxy::chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::chat::User::_iceI_begin_sendMessage(const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_User_sendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_User_sendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_fromWho);
        result->endWriteParams();
        result->invoke(iceC_chat_User_sendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::User::end_sendMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_User_sendMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::chat::User::_iceI_begin_sendPrivateMessage(const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_User_sendPrivateMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_User_sendPrivateMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_fromWho);
        result->endWriteParams();
        result->invoke(iceC_chat_User_sendPrivateMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::User::end_sendPrivateMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_User_sendPrivateMessage_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::chat::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::chat::User::ice_staticId()
{
    return ::chat::User::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::chat::upCast(ChatRoom* p) { return p; }

void
::IceProxy::chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ChatRoom>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ChatRoom;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoom::_iceI_begin_listUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_listUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoom_listUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoom_listUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_chat_ChatRoom_listUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::UserList
IceProxy::chat::ChatRoom::end_listUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatRoom_listUsers_name);
    ::chat::UserList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoom::_iceI_begin_join(const ::std::string& iceP_nick, const ::chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_join_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoom_join_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoom_join_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_nick);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatRoom_join_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::ChatRoom::end_join(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatRoom_join_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::chat::NickNotAvailable&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoom::_iceI_begin_postMessage(const ::std::string& iceP_message, const ::std::string& iceP_fromWho, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoom_postMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoom_postMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_fromWho);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatRoom_postMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::ChatRoom::end_postMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_ChatRoom_postMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoom::_iceI_begin_getUser(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatRoom_getUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoom_getUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoom_getUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatRoom_getUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::UserPrx
IceProxy::chat::ChatRoom::end_getUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatRoom_getUser_name);
    ::chat::UserPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::chat::NoSuchUser&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoom::_iceI_begin_Leave(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoom_Leave_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoom_Leave_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatRoom_Leave_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::ChatRoom::end_Leave(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_ChatRoom_Leave_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::chat::ChatRoom::_newInstance() const
{
    return new ChatRoom;
}
/// \endcond

const ::std::string&
IceProxy::chat::ChatRoom::ice_staticId()
{
    return ::chat::ChatRoom::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::chat::upCast(ChatRoomFactory* p) { return p; }

void
::IceProxy::chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ChatRoomFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ChatRoomFactory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoomFactory::_iceI_begin_newChatRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatRoomFactory_newChatRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoomFactory_newChatRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoomFactory_newChatRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatRoomFactory_newChatRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::ChatRoomPrx
IceProxy::chat::ChatRoomFactory::end_newChatRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatRoomFactory_newChatRoom_name);
    ::chat::ChatRoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatRoomFactory::_iceI_begin_getNumberOfRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatRoomFactory_getNumberOfRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatRoomFactory_getNumberOfRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatRoomFactory_getNumberOfRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_chat_ChatRoomFactory_getNumberOfRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::chat::ChatRoomFactory::end_getNumberOfRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatRoomFactory_getNumberOfRooms_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::chat::ChatRoomFactory::_newInstance() const
{
    return new ChatRoomFactory;
}
/// \endcond

const ::std::string&
IceProxy::chat::ChatRoomFactory::ice_staticId()
{
    return ::chat::ChatRoomFactory::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::chat::upCast(ChatServer* p) { return p; }

void
::IceProxy::chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ChatServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ChatServer;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::chat::ChatServer::_iceI_begin_getRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatServer_getRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatServer_getRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatServer_getRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_chat_ChatServer_getRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::RoomList
IceProxy::chat::ChatServer::end_getRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatServer_getRooms_name);
    ::chat::RoomList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatServer::_iceI_begin_getRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatServer_getRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatServer_getRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatServer_getRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatServer_getRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::ChatRoomPrx
IceProxy::chat::ChatServer::end_getRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatServer_getRoom_name);
    ::chat::ChatRoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::chat::NoSuchRoom&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatServer::_iceI_begin_newChatRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_chat_ChatServer_newChatRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatServer_newChatRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatServer_newChatRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatServer_newChatRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::chat::ChatRoomPrx
IceProxy::chat::ChatServer::end_newChatRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_chat_ChatServer_newChatRoom_name);
    ::chat::ChatRoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatServer::_iceI_begin_registerFactory(const ::chat::ChatRoomFactoryPrx& iceP_crf, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatServer_registerFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatServer_registerFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_crf);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatServer_registerFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::ChatServer::end_registerFactory(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_ChatServer_registerFactory_name);
}

::Ice::AsyncResultPtr
IceProxy::chat::ChatServer::_iceI_begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& iceP_crf, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_chat_ChatServer_unregisterFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_chat_ChatServer_unregisterFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_crf);
        result->endWriteParams();
        result->invoke(iceC_chat_ChatServer_unregisterFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::chat::ChatServer::end_unregisterFactory(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_chat_ChatServer_unregisterFactory_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::chat::ChatServer::_newInstance() const
{
    return new ChatServer;
}
/// \endcond

const ::std::string&
IceProxy::chat::ChatServer::ice_staticId()
{
    return ::chat::ChatServer::ice_staticId();
}

chat::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* chat::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_chat_User_ids[2] =
{
    "::Ice::Object",
    "::chat::User"
};

}

bool
chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_User_ids, iceC_chat_User_ids + 2, s);
}

::std::vector< ::std::string>
chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_chat_User_ids[0], &iceC_chat_User_ids[2]);
}

const ::std::string&
chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::chat::User";
    return typeId;
#else
    return iceC_chat_User_ids[1];
#endif
}

/// \cond INTERNAL
bool
chat::User::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->read(iceP_message);
    istr->read(iceP_fromWho);
    inS.endReadParams();
    this->sendMessage(iceP_message, iceP_fromWho, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::User::_iceD_sendPrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->read(iceP_message);
    istr->read(iceP_fromWho);
    inS.endReadParams();
    this->sendPrivateMessage(iceP_message, iceP_fromWho, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_chat_User_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendMessage",
    "sendPrivateMessage"
};

}

/// \cond INTERNAL
bool
chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_User_all, iceC_chat_User_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_User_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendMessage(in, current);
        }
        case 5:
        {
            return _iceD_sendPrivateMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

chat::ChatRoom::~ChatRoom()
{
}

/// \cond INTERNAL
::Ice::Object* chat::upCast(ChatRoom* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_chat_ChatRoom_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatRoom"
};

}

bool
chat::ChatRoom::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatRoom_ids, iceC_chat_ChatRoom_ids + 2, s);
}

::std::vector< ::std::string>
chat::ChatRoom::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_chat_ChatRoom_ids[0], &iceC_chat_ChatRoom_ids[2]);
}

const ::std::string&
chat::ChatRoom::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatRoom::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::chat::ChatRoom";
    return typeId;
#else
    return iceC_chat_ChatRoom_ids[1];
#endif
}

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_listUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    UserList ret = this->listUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_nick;
    UserPrx iceP_who;
    istr->read(iceP_nick);
    istr->read(iceP_who);
    inS.endReadParams();
    this->join(iceP_nick, iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_postMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::string iceP_fromWho;
    istr->read(iceP_message);
    istr->read(iceP_fromWho);
    inS.endReadParams();
    this->postMessage(iceP_message, iceP_fromWho, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    UserPrx ret = this->getUser(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoom::_iceD_Leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->Leave(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_chat_ChatRoom_all[] =
{
    "Leave",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "listUsers",
    "postMessage"
};

}

/// \cond INTERNAL
bool
chat::ChatRoom::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatRoom_all, iceC_chat_ChatRoom_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatRoom_all)
    {
        case 0:
        {
            return _iceD_Leave(in, current);
        }
        case 1:
        {
            return _iceD_getUser(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_listUsers(in, current);
        }
        case 8:
        {
            return _iceD_postMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
chat::ChatRoom::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ChatRoom, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::ChatRoom::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ChatRoom, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
chat::_icePatchObjectPtr(ChatRoomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ChatRoomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ChatRoom::ice_staticId(), v);
    }
}
/// \endcond

chat::ChatRoomFactory::~ChatRoomFactory()
{
}

/// \cond INTERNAL
::Ice::Object* chat::upCast(ChatRoomFactory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_chat_ChatRoomFactory_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatRoomFactory"
};

}

bool
chat::ChatRoomFactory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatRoomFactory_ids, iceC_chat_ChatRoomFactory_ids + 2, s);
}

::std::vector< ::std::string>
chat::ChatRoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_chat_ChatRoomFactory_ids[0], &iceC_chat_ChatRoomFactory_ids[2]);
}

const ::std::string&
chat::ChatRoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatRoomFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::chat::ChatRoomFactory";
    return typeId;
#else
    return iceC_chat_ChatRoomFactory_ids[1];
#endif
}

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceD_newChatRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ChatRoomPrx ret = this->newChatRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceD_getNumberOfRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getNumberOfRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_chat_ChatRoomFactory_all[] =
{
    "getNumberOfRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newChatRoom"
};

}

/// \cond INTERNAL
bool
chat::ChatRoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatRoomFactory_all, iceC_chat_ChatRoomFactory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatRoomFactory_all)
    {
        case 0:
        {
            return _iceD_getNumberOfRooms(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_newChatRoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
chat::ChatRoomFactory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ChatRoomFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::ChatRoomFactory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ChatRoomFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
chat::_icePatchObjectPtr(ChatRoomFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ChatRoomFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ChatRoomFactory::ice_staticId(), v);
    }
}
/// \endcond

chat::ChatServer::~ChatServer()
{
}

/// \cond INTERNAL
::Ice::Object* chat::upCast(ChatServer* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_chat_ChatServer_ids[2] =
{
    "::Ice::Object",
    "::chat::ChatServer"
};

}

bool
chat::ChatServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_chat_ChatServer_ids, iceC_chat_ChatServer_ids + 2, s);
}

::std::vector< ::std::string>
chat::ChatServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_chat_ChatServer_ids[0], &iceC_chat_ChatServer_ids[2]);
}

const ::std::string&
chat::ChatServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
chat::ChatServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::chat::ChatServer";
    return typeId;
#else
    return iceC_chat_ChatServer_ids[1];
#endif
}

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_getRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ChatRoomPrx ret = this->getRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_newChatRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    ChatRoomPrx ret = this->newChatRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_registerFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ChatRoomFactoryPrx iceP_crf;
    istr->read(iceP_crf);
    inS.endReadParams();
    this->registerFactory(iceP_crf, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
chat::ChatServer::_iceD_unregisterFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ChatRoomFactoryPrx iceP_crf;
    istr->read(iceP_crf);
    inS.endReadParams();
    this->unregisterFactory(iceP_crf, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_chat_ChatServer_all[] =
{
    "getRoom",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newChatRoom",
    "registerFactory",
    "unregisterFactory"
};

}

/// \cond INTERNAL
bool
chat::ChatServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_chat_ChatServer_all, iceC_chat_ChatServer_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_chat_ChatServer_all)
    {
        case 0:
        {
            return _iceD_getRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRooms(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_newChatRoom(in, current);
        }
        case 7:
        {
            return _iceD_registerFactory(in, current);
        }
        case 8:
        {
            return _iceD_unregisterFactory(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
chat::ChatServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ChatServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
chat::ChatServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ChatServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
chat::_icePatchObjectPtr(ChatServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ChatServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ChatServer::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
