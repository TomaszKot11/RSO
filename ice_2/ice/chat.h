//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __chat_h__
#define __chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace chat
{

class User;
class UserPrx;
class ChatRoom;
class ChatRoomPrx;
class ChatRoomFactory;
class ChatRoomFactoryPrx;
class chatServer;
class chatServerPrx;

}

namespace chat
{

struct RoomInfo
{
    ::std::string name;
    short activeUsers;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&, const short&> ice_tuple() const
    {
        return std::tie(name, activeUsers);
    }
};

class NoSuchRoom : public ::Ice::UserExceptionHelper<NoSuchRoom, ::Ice::UserException>
{
public:

    virtual ~NoSuchRoom();

    NoSuchRoom(const NoSuchRoom&) = default;

    NoSuchRoom() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static NoSuchRoom _iceS_NoSuchRoom_init;
/// \endcond

class NameAlreadyExists : public ::Ice::UserExceptionHelper<NameAlreadyExists, ::Ice::UserException>
{
public:

    virtual ~NameAlreadyExists();

    NameAlreadyExists(const NameAlreadyExists&) = default;

    NameAlreadyExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class NoSuchUser : public ::Ice::UserExceptionHelper<NoSuchUser, ::Ice::UserException>
{
public:

    virtual ~NoSuchUser();

    NoSuchUser(const NoSuchUser&) = default;

    NoSuchUser() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class NickNotAvailable : public ::Ice::UserExceptionHelper<NickNotAvailable, ::Ice::UserException>
{
public:

    virtual ~NickNotAvailable();

    NickNotAvailable(const NickNotAvailable&) = default;

    NickNotAvailable() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

using RoomList = ::std::vector<RoomInfo>;

using UserList = ::std::vector<::std::string>;

using NickUserDictinary = ::std::map<::std::string, ::std::shared_ptr<UserPrx>>;

using RoomFactoryList = ::std::vector<::std::shared_ptr<ChatRoomFactoryPrx>>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace chat
{

class User : public virtual ::Ice::Object
{
public:

    using ProxyType = UserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(::std::string message, ::std::string fromWho, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(::std::string message, ::std::string fromWho, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ChatRoom : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatRoomPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual UserList listUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_listUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void join(::std::string nick, ::std::shared_ptr<UserPrx> who, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void postMessage(::std::string message, ::std::string fromWho, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_postMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<UserPrx> getUser(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void Leave(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_Leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class ChatRoomFactory : public virtual ::Ice::Object
{
public:

    using ProxyType = ChatRoomFactoryPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<ChatRoomPrx> newChatRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_newChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class chatServer : public virtual ::Ice::Object
{
public:

    using ProxyType = chatServerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual RoomList getRooms(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<ChatRoomPrx> getRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<ChatRoomPrx> newChatRoom(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_newChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerFactory(::std::shared_ptr<ChatRoomFactoryPrx> crf, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_registerFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterFactory(::std::shared_ptr<ChatRoomFactoryPrx> crf, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace chat
{

class UserPrx : public virtual ::Ice::Proxy<UserPrx, ::Ice::ObjectPrx>
{
public:

    void sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_sendMessage, message, fromWho, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_sendMessage, message, fromWho, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::string& message, const ::std::string& fromWho,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::UserPrx::_iceI_sendMessage, message, fromWho, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_sendPrivateMessage, message, fromWho, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendPrivateMessageAsync(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_sendPrivateMessage, message, fromWho, context);
    }

    ::std::function<void()>
    sendPrivateMessageAsync(const ::std::string& message, const ::std::string& fromWho,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::UserPrx::_iceI_sendPrivateMessage, message, fromWho, context);
    }

    /// \cond INTERNAL
    void _iceI_sendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &UserPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &UserPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &chat::UserPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    UserPrx() = default;
    friend ::std::shared_ptr<UserPrx> IceInternal::createProxy<UserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ChatRoomPrx : public virtual ::Ice::Proxy<ChatRoomPrx, ::Ice::ObjectPrx>
{
public:

    UserList listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<UserList>(true, this, &ChatRoomPrx::_iceI_listUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto listUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<UserList>>().get_future())
    {
        return _makePromiseOutgoing<UserList, P>(false, this, &ChatRoomPrx::_iceI_listUsers, context);
    }

    ::std::function<void()>
    listUsersAsync(::std::function<void(UserList)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<UserList>(response, ex, sent, this, &chat::ChatRoomPrx::_iceI_listUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_listUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<UserList>>&, const ::Ice::Context&);
    /// \endcond

    void join(const ::std::string& nick, const ::std::shared_ptr<UserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_join, nick, who, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto joinAsync(const ::std::string& nick, const ::std::shared_ptr<UserPrx>& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_join, nick, who, context);
    }

    ::std::function<void()>
    joinAsync(const ::std::string& nick, const ::std::shared_ptr<UserPrx>& who,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::ChatRoomPrx::_iceI_join, nick, who, context);
    }

    /// \cond INTERNAL
    void _iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_postMessage, message, fromWho, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto postMessageAsync(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_postMessage, message, fromWho, context);
    }

    ::std::function<void()>
    postMessageAsync(const ::std::string& message, const ::std::string& fromWho,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::ChatRoomPrx::_iceI_postMessage, message, fromWho, context);
    }

    /// \cond INTERNAL
    void _iceI_postMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<UserPrx> getUser(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<UserPrx>>(true, this, &ChatRoomPrx::_iceI_getUser, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUserAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<UserPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<UserPrx>, P>(false, this, &ChatRoomPrx::_iceI_getUser, name, context);
    }

    ::std::function<void()>
    getUserAsync(const ::std::string& name,
                 ::std::function<void(::std::shared_ptr<UserPrx>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<UserPrx>>(response, ex, sent, this, &chat::ChatRoomPrx::_iceI_getUser, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<UserPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void Leave(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ChatRoomPrx::_iceI_Leave, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto LeaveAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ChatRoomPrx::_iceI_Leave, name, context);
    }

    ::std::function<void()>
    LeaveAsync(const ::std::string& name,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::ChatRoomPrx::_iceI_Leave, name, context);
    }

    /// \cond INTERNAL
    void _iceI_Leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatRoomPrx() = default;
    friend ::std::shared_ptr<ChatRoomPrx> IceInternal::createProxy<ChatRoomPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class ChatRoomFactoryPrx : public virtual ::Ice::Proxy<ChatRoomFactoryPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<ChatRoomPrx> newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>>(true, this, &ChatRoomFactoryPrx::_iceI_newChatRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto newChatRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<ChatRoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>, P>(false, this, &ChatRoomFactoryPrx::_iceI_newChatRoom, name, context);
    }

    ::std::function<void()>
    newChatRoomAsync(const ::std::string& name,
                     ::std::function<void(::std::shared_ptr<ChatRoomPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<ChatRoomPrx>>(response, ex, sent, this, &chat::ChatRoomFactoryPrx::_iceI_newChatRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_newChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    ChatRoomFactoryPrx() = default;
    friend ::std::shared_ptr<ChatRoomFactoryPrx> IceInternal::createProxy<ChatRoomFactoryPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class chatServerPrx : public virtual ::Ice::Proxy<chatServerPrx, ::Ice::ObjectPrx>
{
public:

    RoomList getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<RoomList>(true, this, &chatServerPrx::_iceI_getRooms, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRoomsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<RoomList>>().get_future())
    {
        return _makePromiseOutgoing<RoomList, P>(false, this, &chatServerPrx::_iceI_getRooms, context);
    }

    ::std::function<void()>
    getRoomsAsync(::std::function<void(RoomList)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<RoomList>(response, ex, sent, this, &chat::chatServerPrx::_iceI_getRooms, context);
    }

    /// \cond INTERNAL
    void _iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RoomList>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<ChatRoomPrx> getRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>>(true, this, &chatServerPrx::_iceI_getRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<ChatRoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>, P>(false, this, &chatServerPrx::_iceI_getRoom, name, context);
    }

    ::std::function<void()>
    getRoomAsync(const ::std::string& name,
                 ::std::function<void(::std::shared_ptr<ChatRoomPrx>)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<ChatRoomPrx>>(response, ex, sent, this, &chat::chatServerPrx::_iceI_getRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<ChatRoomPrx> newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>>(true, this, &chatServerPrx::_iceI_newChatRoom, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto newChatRoomAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<ChatRoomPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<ChatRoomPrx>, P>(false, this, &chatServerPrx::_iceI_newChatRoom, name, context);
    }

    ::std::function<void()>
    newChatRoomAsync(const ::std::string& name,
                     ::std::function<void(::std::shared_ptr<ChatRoomPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<ChatRoomPrx>>(response, ex, sent, this, &chat::chatServerPrx::_iceI_newChatRoom, name, context);
    }

    /// \cond INTERNAL
    void _iceI_newChatRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<ChatRoomPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void registerFactory(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &chatServerPrx::_iceI_registerFactory, crf, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &chatServerPrx::_iceI_registerFactory, crf, context);
    }

    ::std::function<void()>
    registerFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::chatServerPrx::_iceI_registerFactory, crf, context);
    }

    /// \cond INTERNAL
    void _iceI_registerFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatRoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    void unregisterFactory(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &chatServerPrx::_iceI_unregisterFactory, crf, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto unregisterFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &chatServerPrx::_iceI_unregisterFactory, crf, context);
    }

    ::std::function<void()>
    unregisterFactoryAsync(const ::std::shared_ptr<ChatRoomFactoryPrx>& crf,
                           ::std::function<void()> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &chat::chatServerPrx::_iceI_unregisterFactory, crf, context);
    }

    /// \cond INTERNAL
    void _iceI_unregisterFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<ChatRoomFactoryPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    chatServerPrx() = default;
    friend ::std::shared_ptr<chatServerPrx> IceInternal::createProxy<chatServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::chat::RoomInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::chat::RoomInfo, S>
{
    static void read(S* istr, ::chat::RoomInfo& v)
    {
        istr->readAll(v.name, v.activeUsers);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace chat
{

using UserPtr = ::std::shared_ptr<User>;
using UserPrxPtr = ::std::shared_ptr<UserPrx>;

using ChatRoomPtr = ::std::shared_ptr<ChatRoom>;
using ChatRoomPrxPtr = ::std::shared_ptr<ChatRoomPrx>;

using ChatRoomFactoryPtr = ::std::shared_ptr<ChatRoomFactory>;
using ChatRoomFactoryPrxPtr = ::std::shared_ptr<ChatRoomFactoryPrx>;

using chatServerPtr = ::std::shared_ptr<chatServer>;
using chatServerPrxPtr = ::std::shared_ptr<chatServerPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace chat
{

class User;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< User>&);
::IceProxy::Ice::Object* upCast(User*);
/// \endcond

class ChatRoom;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatRoom>&);
::IceProxy::Ice::Object* upCast(ChatRoom*);
/// \endcond

class ChatRoomFactory;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ChatRoomFactory>&);
::IceProxy::Ice::Object* upCast(ChatRoomFactory*);
/// \endcond

class chatServer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< chatServer>&);
::IceProxy::Ice::Object* upCast(chatServer*);
/// \endcond

}

}

namespace chat
{

class User;
/// \cond INTERNAL
::Ice::Object* upCast(User*);
/// \endcond
typedef ::IceInternal::Handle< User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::chat::User> UserPrx;
typedef UserPrx UserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(UserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ChatRoom;
/// \cond INTERNAL
::Ice::Object* upCast(ChatRoom*);
/// \endcond
typedef ::IceInternal::Handle< ChatRoom> ChatRoomPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::chat::ChatRoom> ChatRoomPrx;
typedef ChatRoomPrx ChatRoomPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatRoomPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class ChatRoomFactory;
/// \cond INTERNAL
::Ice::Object* upCast(ChatRoomFactory*);
/// \endcond
typedef ::IceInternal::Handle< ChatRoomFactory> ChatRoomFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::chat::ChatRoomFactory> ChatRoomFactoryPrx;
typedef ChatRoomFactoryPrx ChatRoomFactoryPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(ChatRoomFactoryPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class chatServer;
/// \cond INTERNAL
::Ice::Object* upCast(chatServer*);
/// \endcond
typedef ::IceInternal::Handle< chatServer> chatServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::chat::chatServer> chatServerPrx;
typedef chatServerPrx chatServerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(chatServerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace chat
{

struct RoomInfo
{
    ::std::string name;
    ::Ice::Short activeUsers;

    bool operator==(const RoomInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(activeUsers != rhs_.activeUsers)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RoomInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(activeUsers < rhs_.activeUsers)
        {
            return true;
        }
        else if(rhs_.activeUsers < activeUsers)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RoomInfo& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RoomInfo& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RoomInfo& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RoomInfo& rhs_) const
    {
        return !operator<(rhs_);
    }
};

class NoSuchRoom : public ::Ice::UserException
{
public:

    NoSuchRoom() {}
    virtual ~NoSuchRoom() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NoSuchRoom* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static NoSuchRoom _iceS_NoSuchRoom_init;
/// \endcond

class NameAlreadyExists : public ::Ice::UserException
{
public:

    NameAlreadyExists() {}
    virtual ~NameAlreadyExists() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NameAlreadyExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class NoSuchUser : public ::Ice::UserException
{
public:

    NoSuchUser() {}
    virtual ~NoSuchUser() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NoSuchUser* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class NickNotAvailable : public ::Ice::UserException
{
public:

    NickNotAvailable() {}
    virtual ~NickNotAvailable() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NickNotAvailable* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector<RoomInfo> RoomList;

typedef ::std::vector< ::std::string> UserList;

typedef ::std::map< ::std::string, UserPrx> NickUserDictinary;

typedef ::std::vector<ChatRoomFactoryPrx> RoomFactoryList;

}

namespace chat
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendMessage.
 */
class Callback_User_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_sendMessage_Base> Callback_User_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendPrivateMessage.
 */
class Callback_User_sendPrivateMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_sendPrivateMessage_Base> Callback_User_sendPrivateMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::User::begin_getName.
 * Create a wrapper instance by calling ::chat::newCallback_User_getName.
 */
class Callback_User_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getName_Base> Callback_User_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoom::begin_listUsers.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_listUsers.
 */
class Callback_ChatRoom_listUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_listUsers_Base> Callback_ChatRoom_listUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoom::begin_join.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_join.
 */
class Callback_ChatRoom_join_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_join_Base> Callback_ChatRoom_joinPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoom::begin_postMessage.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_postMessage.
 */
class Callback_ChatRoom_postMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_postMessage_Base> Callback_ChatRoom_postMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoom::begin_getUser.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_getUser.
 */
class Callback_ChatRoom_getUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_getUser_Base> Callback_ChatRoom_getUserPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoom::begin_Leave.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_Leave.
 */
class Callback_ChatRoom_Leave_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoom_Leave_Base> Callback_ChatRoom_LeavePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoomFactory_newChatRoom.
 */
class Callback_ChatRoomFactory_newChatRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ChatRoomFactory_newChatRoom_Base> Callback_ChatRoomFactory_newChatRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::chatServer::begin_getRooms.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRooms.
 */
class Callback_chatServer_getRooms_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_chatServer_getRooms_Base> Callback_chatServer_getRoomsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::chatServer::begin_getRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRoom.
 */
class Callback_chatServer_getRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_chatServer_getRoom_Base> Callback_chatServer_getRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::chatServer::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_newChatRoom.
 */
class Callback_chatServer_newChatRoom_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_chatServer_newChatRoom_Base> Callback_chatServer_newChatRoomPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::chatServer::begin_registerFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_registerFactory.
 */
class Callback_chatServer_registerFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_chatServer_registerFactory_Base> Callback_chatServer_registerFactoryPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::chat::chatServer::begin_unregisterFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_unregisterFactory.
 */
class Callback_chatServer_unregisterFactory_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_chatServer_unregisterFactory_Base> Callback_chatServer_unregisterFactoryPtr;

}

namespace IceProxy
{

namespace chat
{

class User : public virtual ::Ice::Proxy<User, ::IceProxy::Ice::Object>
{
public:

    void sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, fromWho, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::chat::Callback_User_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::chat::Callback_User_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, fromWho, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendPrivateMessage(_iceI_begin_sendPrivateMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendPrivateMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(message, fromWho, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::chat::Callback_User_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::chat::Callback_User_sendPrivateMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPrivateMessage(message, fromWho, context, cb, cookie);
    }

    void end_sendPrivateMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendPrivateMessage(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ChatRoom : public virtual ::Ice::Proxy<ChatRoom, ::IceProxy::Ice::Object>
{
public:

    ::chat::UserList listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_listUsers(_iceI_begin_listUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_listUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::chat::Callback_ChatRoom_listUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context, const ::chat::Callback_ChatRoom_listUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(context, cb, cookie);
    }

    ::chat::UserList end_listUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_listUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void join(const ::std::string& nick, const ::chat::UserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_join(_iceI_begin_join(nick, who, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_join(const ::std::string& nick, const ::chat::UserPrx& who, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_join(nick, who, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_join(const ::std::string& nick, const ::chat::UserPrx& who, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(nick, who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::std::string& nick, const ::chat::UserPrx& who, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(nick, who, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::std::string& nick, const ::chat::UserPrx& who, const ::chat::Callback_ChatRoom_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(nick, who, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::std::string& nick, const ::chat::UserPrx& who, const ::Ice::Context& context, const ::chat::Callback_ChatRoom_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(nick, who, context, cb, cookie);
    }

    void end_join(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_join(const ::std::string&, const ::chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_postMessage(_iceI_begin_postMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_postMessage(message, fromWho, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_postMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_postMessage(message, fromWho, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_postMessage(const ::std::string& message, const ::std::string& fromWho, const ::chat::Callback_ChatRoom_postMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_postMessage(message, fromWho, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Context& context, const ::chat::Callback_ChatRoom_postMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_postMessage(message, fromWho, context, cb, cookie);
    }

    void end_postMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_postMessage(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::chat::UserPrx getUser(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getUser(_iceI_begin_getUser(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUser(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUser(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUser(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(const ::std::string& name, const ::chat::Callback_ChatRoom_getUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(const ::std::string& name, const ::Ice::Context& context, const ::chat::Callback_ChatRoom_getUserPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(name, context, cb, cookie);
    }

    ::chat::UserPrx end_getUser(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUser(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void Leave(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_Leave(_iceI_begin_Leave(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_Leave(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_Leave(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Leave(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Leave(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Leave(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Leave(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Leave(const ::std::string& name, const ::chat::Callback_ChatRoom_LeavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Leave(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_Leave(const ::std::string& name, const ::Ice::Context& context, const ::chat::Callback_ChatRoom_LeavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_Leave(name, context, cb, cookie);
    }

    void end_Leave(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_Leave(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class ChatRoomFactory : public virtual ::Ice::Proxy<ChatRoomFactory, ::IceProxy::Ice::Object>
{
public:

    ::chat::ChatRoomPrx newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_newChatRoom(_iceI_begin_newChatRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_newChatRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::chat::Callback_ChatRoomFactory_newChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::chat::Callback_ChatRoomFactory_newChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, context, cb, cookie);
    }

    ::chat::ChatRoomPrx end_newChatRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_newChatRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class chatServer : public virtual ::Ice::Proxy<chatServer, ::IceProxy::Ice::Object>
{
public:

    ::chat::RoomList getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRooms(_iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRooms(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::chat::Callback_chatServer_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& context, const ::chat::Callback_chatServer_getRoomsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRooms(context, cb, cookie);
    }

    ::chat::RoomList end_getRooms(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRooms(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::chat::ChatRoomPrx getRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRoom(_iceI_begin_getRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoom(const ::std::string& name, const ::chat::Callback_chatServer_getRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoom(const ::std::string& name, const ::Ice::Context& context, const ::chat::Callback_chatServer_getRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRoom(name, context, cb, cookie);
    }

    ::chat::ChatRoomPrx end_getRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::chat::ChatRoomPrx newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_newChatRoom(_iceI_begin_newChatRoom(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_newChatRoom(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::chat::Callback_chatServer_newChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_newChatRoom(const ::std::string& name, const ::Ice::Context& context, const ::chat::Callback_chatServer_newChatRoomPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_newChatRoom(name, context, cb, cookie);
    }

    ::chat::ChatRoomPrx end_newChatRoom(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_newChatRoom(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_registerFactory(_iceI_begin_registerFactory(crf, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_registerFactory(crf, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerFactory(crf, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerFactory(crf, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::chat::Callback_chatServer_registerFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerFactory(crf, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context, const ::chat::Callback_chatServer_registerFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerFactory(crf, context, cb, cookie);
    }

    void end_registerFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_registerFactory(const ::chat::ChatRoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_unregisterFactory(_iceI_begin_unregisterFactory(crf, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_unregisterFactory(crf, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterFactory(crf, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterFactory(crf, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::chat::Callback_chatServer_unregisterFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterFactory(crf, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx& crf, const ::Ice::Context& context, const ::chat::Callback_chatServer_unregisterFactoryPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterFactory(crf, context, cb, cookie);
    }

    void end_unregisterFactory(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_unregisterFactory(const ::chat::ChatRoomFactoryPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace chat
{

class User : public virtual ::Ice::Object
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;

    virtual ~User();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void sendMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendPrivateMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ChatRoom : public virtual ::Ice::Object
{
public:

    typedef ChatRoomPrx ProxyType;
    typedef ChatRoomPtr PointerType;

    virtual ~ChatRoom();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual UserList listUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_listUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void join(const ::std::string& nick, const UserPrx& who, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void postMessage(const ::std::string& message, const ::std::string& fromWho, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_postMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual UserPrx getUser(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getUser(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void Leave(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_Leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatRoom& lhs, const ChatRoom& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatRoom& lhs, const ChatRoom& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class ChatRoomFactory : public virtual ::Ice::Object
{
public:

    typedef ChatRoomFactoryPrx ProxyType;
    typedef ChatRoomFactoryPtr PointerType;

    virtual ~ChatRoomFactory();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ChatRoomPrx newChatRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_newChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const ChatRoomFactory& lhs, const ChatRoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const ChatRoomFactory& lhs, const ChatRoomFactory& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class chatServer : public virtual ::Ice::Object
{
public:

    typedef chatServerPrx ProxyType;
    typedef chatServerPtr PointerType;

    virtual ~chatServer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual RoomList getRooms(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getRooms(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ChatRoomPrx getRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ChatRoomPrx newChatRoom(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_newChatRoom(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerFactory(const ChatRoomFactoryPrx& crf, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_registerFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterFactory(const ChatRoomFactoryPrx& crf, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterFactory(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const chatServer& lhs, const chatServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const chatServer& lhs, const chatServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::chat::RoomInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::chat::RoomInfo, S>
{
    static void write(S* ostr, const ::chat::RoomInfo& v)
    {
        ostr->write(v.name);
        ostr->write(v.activeUsers);
    }
};

template<typename S>
struct StreamReader< ::chat::RoomInfo, S>
{
    static void read(S* istr, ::chat::RoomInfo& v)
    {
        istr->read(v.name);
        istr->read(v.activeUsers);
    }
};

template<>
struct StreamableTraits< ::chat::NoSuchRoom>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::chat::NameAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::chat::NoSuchUser>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::chat::NickNotAvailable>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}
/// \endcond

namespace chat
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendMessage.
 */
template<class T>
class CallbackNC_User_sendMessage : public Callback_User_sendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::User::begin_sendMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendMessage.
 */
template<class T, typename CT>
class Callback_User_sendMessage : public Callback_User_sendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendMessage.
 */
template<class T, typename CT> Callback_User_sendMessagePtr
newCallback_User_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendPrivateMessage.
 */
template<class T>
class CallbackNC_User_sendPrivateMessage : public Callback_User_sendPrivateMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_sendPrivateMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::User::begin_sendPrivateMessage.
 * Create a wrapper instance by calling ::chat::newCallback_User_sendPrivateMessage.
 */
template<class T, typename CT>
class Callback_User_sendPrivateMessage : public Callback_User_sendPrivateMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_sendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_sendPrivateMessage.
 */
template<class T, typename CT> Callback_User_sendPrivateMessagePtr
newCallback_User_sendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_sendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::User::begin_getName.
 * Create a wrapper instance by calling ::chat::newCallback_User_getName.
 */
template<class T>
class CallbackNC_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::User::begin_getName.
 * Create a wrapper instance by calling ::chat::newCallback_User_getName.
 */
template<class T, typename CT>
class Callback_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoom::begin_listUsers.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_listUsers.
 */
template<class T>
class CallbackNC_ChatRoom_listUsers : public Callback_ChatRoom_listUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserList&);

    CallbackNC_ChatRoom_listUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserList ret;
        try
        {
            ret = proxy->end_listUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_listUsers.
 */
template<class T> Callback_ChatRoom_listUsersPtr
newCallback_ChatRoom_listUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_listUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_listUsers.
 */
template<class T> Callback_ChatRoom_listUsersPtr
newCallback_ChatRoom_listUsers(T* instance, void (T::*cb)(const UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_listUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoom::begin_listUsers.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_listUsers.
 */
template<class T, typename CT>
class Callback_ChatRoom_listUsers : public Callback_ChatRoom_listUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserList&, const CT&);

    Callback_ChatRoom_listUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserList ret;
        try
        {
            ret = proxy->end_listUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_listUsers.
 */
template<class T, typename CT> Callback_ChatRoom_listUsersPtr
newCallback_ChatRoom_listUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_listUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_listUsers.
 */
template<class T, typename CT> Callback_ChatRoom_listUsersPtr
newCallback_ChatRoom_listUsers(T* instance, void (T::*cb)(const UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_listUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoom::begin_join.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_join.
 */
template<class T>
class CallbackNC_ChatRoom_join : public Callback_ChatRoom_join_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_join(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_join<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_join<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoom::begin_join.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_join.
 */
template<class T, typename CT>
class Callback_ChatRoom_join : public Callback_ChatRoom_join_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_join(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T, typename CT> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T, typename CT> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T, typename CT> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_join.
 */
template<class T, typename CT> Callback_ChatRoom_joinPtr
newCallback_ChatRoom_join(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoom::begin_postMessage.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_postMessage.
 */
template<class T>
class CallbackNC_ChatRoom_postMessage : public Callback_ChatRoom_postMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_postMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_postMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_postMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_postMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_postMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoom::begin_postMessage.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_postMessage.
 */
template<class T, typename CT>
class Callback_ChatRoom_postMessage : public Callback_ChatRoom_postMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_postMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T, typename CT> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_postMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T, typename CT> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_postMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T, typename CT> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_postMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_postMessage.
 */
template<class T, typename CT> Callback_ChatRoom_postMessagePtr
newCallback_ChatRoom_postMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_postMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoom::begin_getUser.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_getUser.
 */
template<class T>
class CallbackNC_ChatRoom_getUser : public Callback_ChatRoom_getUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserPrx&);

    CallbackNC_ChatRoom_getUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserPrx ret;
        try
        {
            ret = proxy->end_getUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_getUser.
 */
template<class T> Callback_ChatRoom_getUserPtr
newCallback_ChatRoom_getUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getUser<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_getUser.
 */
template<class T> Callback_ChatRoom_getUserPtr
newCallback_ChatRoom_getUser(T* instance, void (T::*cb)(const UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_getUser<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoom::begin_getUser.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_getUser.
 */
template<class T, typename CT>
class Callback_ChatRoom_getUser : public Callback_ChatRoom_getUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserPrx&, const CT&);

    Callback_ChatRoom_getUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomPrx proxy = ChatRoomPrx::uncheckedCast(result->getProxy());
        UserPrx ret;
        try
        {
            ret = proxy->end_getUser(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_getUser.
 */
template<class T, typename CT> Callback_ChatRoom_getUserPtr
newCallback_ChatRoom_getUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_getUser.
 */
template<class T, typename CT> Callback_ChatRoom_getUserPtr
newCallback_ChatRoom_getUser(T* instance, void (T::*cb)(const UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_getUser<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoom::begin_Leave.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_Leave.
 */
template<class T>
class CallbackNC_ChatRoom_Leave : public Callback_ChatRoom_Leave_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ChatRoom_Leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_Leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_Leave<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_Leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoom_Leave<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoom::begin_Leave.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoom_Leave.
 */
template<class T, typename CT>
class Callback_ChatRoom_Leave : public Callback_ChatRoom_Leave_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ChatRoom_Leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T, typename CT> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_Leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T, typename CT> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_Leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T, typename CT> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_Leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoom::begin_Leave.
 */
template<class T, typename CT> Callback_ChatRoom_LeavePtr
newCallback_ChatRoom_Leave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoom_Leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoomFactory_newChatRoom.
 */
template<class T>
class CallbackNC_ChatRoomFactory_newChatRoom : public Callback_ChatRoomFactory_newChatRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomPrx&);

    CallbackNC_ChatRoomFactory_newChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_newChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 */
template<class T> Callback_ChatRoomFactory_newChatRoomPtr
newCallback_ChatRoomFactory_newChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_newChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 */
template<class T> Callback_ChatRoomFactory_newChatRoomPtr
newCallback_ChatRoomFactory_newChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ChatRoomFactory_newChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_ChatRoomFactory_newChatRoom.
 */
template<class T, typename CT>
class Callback_ChatRoomFactory_newChatRoom : public Callback_ChatRoomFactory_newChatRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomPrx&, const CT&);

    Callback_ChatRoomFactory_newChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ChatRoomFactoryPrx proxy = ChatRoomFactoryPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_newChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 */
template<class T, typename CT> Callback_ChatRoomFactory_newChatRoomPtr
newCallback_ChatRoomFactory_newChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_newChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::ChatRoomFactory::begin_newChatRoom.
 */
template<class T, typename CT> Callback_ChatRoomFactory_newChatRoomPtr
newCallback_ChatRoomFactory_newChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ChatRoomFactory_newChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::chatServer::begin_getRooms.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRooms.
 */
template<class T>
class CallbackNC_chatServer_getRooms : public Callback_chatServer_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RoomList&);

    CallbackNC_chatServer_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        RoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRooms.
 */
template<class T> Callback_chatServer_getRoomsPtr
newCallback_chatServer_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRooms.
 */
template<class T> Callback_chatServer_getRoomsPtr
newCallback_chatServer_getRooms(T* instance, void (T::*cb)(const RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_getRooms<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::chatServer::begin_getRooms.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRooms.
 */
template<class T, typename CT>
class Callback_chatServer_getRooms : public Callback_chatServer_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RoomList&, const CT&);

    Callback_chatServer_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        RoomList ret;
        try
        {
            ret = proxy->end_getRooms(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRooms.
 */
template<class T, typename CT> Callback_chatServer_getRoomsPtr
newCallback_chatServer_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRooms.
 */
template<class T, typename CT> Callback_chatServer_getRoomsPtr
newCallback_chatServer_getRooms(T* instance, void (T::*cb)(const RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_getRooms<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::chatServer::begin_getRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRoom.
 */
template<class T>
class CallbackNC_chatServer_getRoom : public Callback_chatServer_getRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomPrx&);

    CallbackNC_chatServer_getRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_getRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRoom.
 */
template<class T> Callback_chatServer_getRoomPtr
newCallback_chatServer_getRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_getRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRoom.
 */
template<class T> Callback_chatServer_getRoomPtr
newCallback_chatServer_getRoom(T* instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_getRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::chatServer::begin_getRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_getRoom.
 */
template<class T, typename CT>
class Callback_chatServer_getRoom : public Callback_chatServer_getRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomPrx&, const CT&);

    Callback_chatServer_getRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_getRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRoom.
 */
template<class T, typename CT> Callback_chatServer_getRoomPtr
newCallback_chatServer_getRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_getRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_getRoom.
 */
template<class T, typename CT> Callback_chatServer_getRoomPtr
newCallback_chatServer_getRoom(T* instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_getRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::chatServer::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_newChatRoom.
 */
template<class T>
class CallbackNC_chatServer_newChatRoom : public Callback_chatServer_newChatRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ChatRoomPrx&);

    CallbackNC_chatServer_newChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_newChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_newChatRoom.
 */
template<class T> Callback_chatServer_newChatRoomPtr
newCallback_chatServer_newChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_newChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_newChatRoom.
 */
template<class T> Callback_chatServer_newChatRoomPtr
newCallback_chatServer_newChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_newChatRoom<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::chatServer::begin_newChatRoom.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_newChatRoom.
 */
template<class T, typename CT>
class Callback_chatServer_newChatRoom : public Callback_chatServer_newChatRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ChatRoomPrx&, const CT&);

    Callback_chatServer_newChatRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        chatServerPrx proxy = chatServerPrx::uncheckedCast(result->getProxy());
        ChatRoomPrx ret;
        try
        {
            ret = proxy->end_newChatRoom(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_newChatRoom.
 */
template<class T, typename CT> Callback_chatServer_newChatRoomPtr
newCallback_chatServer_newChatRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_newChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_newChatRoom.
 */
template<class T, typename CT> Callback_chatServer_newChatRoomPtr
newCallback_chatServer_newChatRoom(T* instance, void (T::*cb)(const ChatRoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_newChatRoom<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::chatServer::begin_registerFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_registerFactory.
 */
template<class T>
class CallbackNC_chatServer_registerFactory : public Callback_chatServer_registerFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_chatServer_registerFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_registerFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_registerFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_registerFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_registerFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::chatServer::begin_registerFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_registerFactory.
 */
template<class T, typename CT>
class Callback_chatServer_registerFactory : public Callback_chatServer_registerFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_chatServer_registerFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T, typename CT> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_registerFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T, typename CT> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_registerFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T, typename CT> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_registerFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_registerFactory.
 */
template<class T, typename CT> Callback_chatServer_registerFactoryPtr
newCallback_chatServer_registerFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_registerFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::chat::chatServer::begin_unregisterFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_unregisterFactory.
 */
template<class T>
class CallbackNC_chatServer_unregisterFactory : public Callback_chatServer_unregisterFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_chatServer_unregisterFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_unregisterFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_unregisterFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_unregisterFactory<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_chatServer_unregisterFactory<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::chat::chatServer::begin_unregisterFactory.
 * Create a wrapper instance by calling ::chat::newCallback_chatServer_unregisterFactory.
 */
template<class T, typename CT>
class Callback_chatServer_unregisterFactory : public Callback_chatServer_unregisterFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_chatServer_unregisterFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T, typename CT> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_unregisterFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T, typename CT> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_unregisterFactory<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T, typename CT> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_unregisterFactory<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::chat::chatServer::begin_unregisterFactory.
 */
template<class T, typename CT> Callback_chatServer_unregisterFactoryPtr
newCallback_chatServer_unregisterFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_chatServer_unregisterFactory<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
